(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{492:function(s,t,n){"use strict";n.r(t);var a=n(4),r=Object(a.a)({},(function(){var s=this,t=s.$createElement,n=s._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("ul",[n("li",[s._v("函数式编程是随着 React 的流行而收到越来越多的关注")]),s._v(" "),n("li",[s._v("Vue3 也开始拥抱函数式编程")]),s._v(" "),n("li",[s._v("函数式编程可以抛弃 this")]),s._v(" "),n("li",[s._v("打包过程更好的利用 tree shaking 过滤无用代码")]),s._v(" "),n("li",[s._v("方便测试，方便并行使用")]),s._v(" "),n("li",[s._v("有很多库帮助我们进行函数式开发")])]),s._v(" "),n("h2",{attrs:{id:"什么是函数式编程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#什么是函数式编程"}},[s._v("#")]),s._v(" 什么是函数式编程")]),s._v(" "),n("p",[n("strong",[s._v("函数式编程")]),s._v(" 是编程规范之一，除他之外我们常听说的还有"),n("strong",[s._v("面向过程编程")]),s._v("、"),n("strong",[s._v("面向对象编程")]),s._v("。")]),s._v(" "),n("h3",{attrs:{id:"定义"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#定义"}},[s._v("#")]),s._v(" 定义")]),s._v(" "),n("p",[n("strong",[s._v("函数式编程（Function Programing）")]),s._v(" 是一种以函数为中心的编程思想。就是把现实世界的事物和事物之间的联系抽象到程序世界（对运算过程进行抽\n象）。例如：Python、Ruby。")]),s._v(" "),n("p",[n("strong",[s._v("补充：")])]),s._v(" "),n("ul",[n("li",[n("code",[s._v("x -> f(联系、映射) -> y, y = f(x)")])]),s._v(" "),n("li",[n("strong",[s._v("函数式编程中的函数指的不是程序中的函数")]),s._v("，而是数学中的映射关系，例如："),n("code",[s._v("y = sin(x)")]),s._v("，x 和 y 的关系")]),s._v(" "),n("li",[n("strong",[s._v("相同的输入始终得到相同的输出")]),s._v("（纯函数）")]),s._v(" "),n("li",[s._v("函数式编程用来描述数据（函数）之间的映射")])]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 非函数式 ")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" num1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" \n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" num2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" \n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" sum "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" num1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" num2 \nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("sum"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" \n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 函数式 ")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("n1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" n2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" n1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" n2 "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" sum "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" \nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("sum"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("h3",{attrs:{id:"其他编程思想"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#其他编程思想"}},[s._v("#")]),s._v(" 其他编程思想")]),s._v(" "),n("ul",[n("li",[n("strong",[s._v("面向过程编程（Procedure Oriented）")]),s._v(" 是一种以过程为中心的编程思想。就是分析出解决问题的步骤，然后把函数一步步实现，使用的时候一个一个的调用就可以了。例如：C语言。")]),s._v(" "),n("li",[n("strong",[s._v("面向对象编程（Object Oriented）")]),s._v(" 是一种以对象为中心的编程思想。把现实世界中的事物抽象成程序世界中的类和对象，通过封装、继承和\n多态来演示事物事件的联系。例如：C++、Java。")])]),s._v(" "),n("h2",{attrs:{id:"特点"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#特点"}},[s._v("#")]),s._v(" 特点")]),s._v(" "),n("ol",[n("li",[n("p",[n("strong",[s._v("函数是“第一等公民”")]),s._v("。指的是函数与其他数据类型一样，处于平等地位，可以赋值给其他变量，也可以作为参数，传入另一个函数，或者作为别的函数的返回值。")])]),s._v(" "),n("li",[n("p",[n("strong",[s._v("只用“表达式”，不用语句")]),s._v('。"表达式"（expression）是一个单纯的运算过程，总是有返回值；"语句"（statement）是执行某种操作，没有返回值。函数式编程要求只使用表达式，不使用语句，每一步都是单纯的运算，而且都有返回值。')])]),s._v(" "),n("li",[n("p",[n("strong",[s._v("没有“副作用”")]),s._v("。所谓“副作用”，指的式函数内部与外部互动（例如：修改函数外部的变量），产生运算以外的结果。")])]),s._v(" "),n("li",[n("p",[n("strong",[s._v("不修改状态")]),s._v("。函数式编程只返回新的值，不修改系统变量，这也是它重要的一个特点。")])]),s._v(" "),n("li",[n("p",[n("strong",[s._v("引用透明（Referential transparency）")]),s._v("。 指的是函数的运行不依赖外部变量或“状态”，只依赖输入的参数，任何时候只要参数相同，引用函数得到的返回值总是相同的，这一点也是做函数缓存的基础。")])]),s._v(" "),n("li",[n("p",[n("strong",[s._v("惰性执行（Lazy Evaluation）")]),s._v("。所谓惰性执行指的是函数只在需要的时候执行，即不产生无意义的中间变量。")])])])])}),[],!1,null,null,null);t.default=r.exports}}]);